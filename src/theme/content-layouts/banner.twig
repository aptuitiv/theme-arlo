{% import 'macros/macros' as macros %}

{# Banner Image Macro #}
{% macro bannerImage(slide, doCss) %}
    <div class="Banner-bg">
        {% set css = [] %}
        {# The minimum aspect ratio for the banner image. This prevents the image from being too tall. #}
        {% set minimumRatio = _core.theme.settings.bannerMinImageRatio.number ?? (4/9) %}

        {# Set the default aspect ratio to use with the image cropping and in the CSS for the Banner tag #}
        {% set defaultCropAspectRatio = _core.theme.settings.bannerImageRatio.ratioX ?? '120x9' %}
        {% set defaultCssAspectRatio = _core.theme.settings.bannerImageRatio.ratioSlash ?? '20/99' %}

        {# Get the aspect ratio of the image #}
        {% set imageCropAspectRatio = defaultCropAspectRatio %}
        {% set imageCssAspectRatio = defaultCssAspectRatio %}
        {% set imageRatio = 1 %}
        {% if slide.image.width && slide.image.height %}
            {# Set the crop ratios to come from the image size #}
            {% set imageCropAspectRatio = slide.image.width ~ 'x' ~ slide.image.height %}
            {% set imageCssAspectRatio = slide.image.width ~ '/' ~ slide.image.height %}
            {% set imageRatio = slide.image.width.get() / slide.image.height.get() %}

            {# If the banner crop stragegy is to always crop, or if the image is too tall then set the
                # crop aspect ratio to the default aspect ratio and the CSS aspect ratio to the default aspect ratio
                #}
            {% if _core.theme.settings.bannerImageCropStrategy == 'crop' or (imageRatio < minimumRatio) %}
                {% set imageCropAspectRatio = defaultCropAspectRatio %}
                {% set imageCssAspectRatio = defaultCssAspectRatio %}
            {% endif %}
        {% endif %}

        {# Set the crop orientation #}
        {% set cropOrientation = _core.theme.settings.bannerImageCropOrientation %}
        {% if slide.imageCrop && slide.imageCrop != 'Site default' %}
            {% set cropOrientation = slide.imageCrop %}
        {% endif %}

        {# Set the cropping for the image #}
        {% do slide.image.crop({
            ar: imageCropAspectRatio,
            crop: cropOrientation|lower
        }) %}

        {# Extract the image sizes from the settings and sort them by width #}
        {% set sizes = [] %}
        {% for imageSize in _core.theme.settings.bannerImageSizes %}
            {% set sizes = sizes|merge([{width: imageSize.size.x, height: imageSize.size.y, ratio: imageSize.size.number}]) %}
        {% endfor %}
        {% set sizes = sizes|sort_by_key("width") %}

        {% if sizes|length > 0 %}
            {% set maxWidth = 0 %}
            {% for size in sizes %}
                {# Set up the aspect ratio to use with the image cropping and in the CSS for the Banner tag #}
                {% set cropAspectRatio = imageCropAspectRatio %}
                {% set cssAspectRatio = imageCssAspectRatio %}
                {% set cssMinWidth = loop.first ? 1 : size.width %}
                {% if _core.theme.settings.bannerImageCropStrategy == 'crop' or (imageRatio < minimumRatio && size.ratio > imageRatio) %}
                    {% set cropAspectRatio = size.width ~ 'x' ~ size.height %}
                    {% set cssAspectRatio = size.width ~ '/' ~ size.height %}
                {% endif %}
                {% set css = css|merge([{
                    minWidth: cssMinWidth,
                    cssAspectRatio: cssAspectRatio
                }]) %}

                {# Add the image sources and preload media queries #}
                {% do slide.image.addSource("(max-width: " ~ size.width ~ "px)")
                    .crop({
                        width: size.width,
                        ar: cropAspectRatio,
                        crop: cropOrientation|lower
                    })
                    .preloadMedia(
                        loop.first ?
                        "(max-width: "  ~ size.width ~"px)" :
                        "(min-width: " ~ (maxWidth + 1) ~ "px) and (max-width: "  ~ size.width ~"px)"
                    )
                %}
                {% set maxWidth = size.width %}
            {% endfor %}
        {% else %}
            {# The image sizes are not set, so set the CSS using the image's crop aspect ratio #}
            {% inlinecss %}
                .Banner {aspect-ratio: {{ imageCssAspectRatio }}; }
            {% endinlinecss %}
        {% endif %}

        {# Set the inline CSS for the banner aspect ratios #}
        {% if doCss %}
            {% inlinecss %}
            {% for cssOption in css %}
                @media (min-width: {{ cssOption.minWidth }}px) {
                    .Banner {aspect-ratio: {{ cssOption.cssAspectRatio }}; }
                }
            {% endfor %}
            {% endinlinecss %}
        {% endif %}

        {# Output the banner image #}
        {% set slide.image.picture.class = "Banner-picture" %}
        {% set slide.image.class = "Banner-image" %}
        {% do slide.image.prioritize({ media: "(min-width: " ~ (maxWidth + 1) ~ "px)" }) %}
        {{ slide.image.tag }}
    </div>
{% endmacro %}

{# Banner Video Macro #}
{% macro bannerVideo(slide, doCss) %}
    <div class="Banner-bg">
        <video class="Banner-video" autoplay muted loop playsinline src="{{ slide.video.src }}"></video>
    </div>
    {% if doCss %}
        {# Set the aspect ratio on the Banner to make this visible #}
        {# First set a default value #}
        {% set aspectRatio = '16/9' %}
        {# Now try and get the aspect ratio from the largest banner image size #}
        {% if _core.theme.settings.bannerImageSizes|length > 0 %}
            {% set sizes = [] %}
            {% for imageSize in _core.theme.settings.bannerImageSizes %}
                {% set sizes = sizes|merge([{width: imageSize.size.x, ratio: imageSize.size.ratioSlash}]) %}
            {% endfor %}
            {% set sizes = sizes|sort_by_key("width") %}
            {% set aspectRatio = sizes|last.ratio %}
        {% endif %}
        {% inlinecss %}
            .Banner {aspect-ratio: {{ aspectRatio }}; }
        {% endinlinecss %}
    {% endif %}
{% endmacro %}

{# Banner content macro #}
{% macro bannerContent(slide) %}
    {% if slide.content %}
        <div class="Banner-fg{% if not slide.image && not slide.video %} Banner-fg--noImage{% endif %}">
            <div class="Banner-content last-child-sb-0">
                {{ slide.content }}
            </div>
        </div>
    {% endif %}
{% endmacro %}

{# Build the banner slider #}
{% if slides %}
    {% if slides|length == 1 %}
        {% set slide = slides|first %}
        {% if slide.image or slide.video or slide.content %}
            <div class="Banner" role="group" aria-label="Banner">
                {% if slide.image %}
                    {{ _self.bannerImage(slides|first, true) }}
                {% elseif  slide.video %}
                    {{ _self.bannerVideo(slide, true) }}
                {% endif %}
                {{ _self.bannerContent(slide) }}
            </div>
        {% endif %}
    {% else %}
        {% set class = 'js-bannerSlider--' ~ random_string() %}
        <div class="Banner splide {{ class }}" role="group" aria-label="Banner Slider">
            <div class="splide__track">
                <ul class="splide__list">
                    {% for slide in slides %}
                        {% if slide.image %}
                            <li class="splide__slide">
                                {{ _self.bannerImage(slide, loop.first) }}
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
            </div>
        </div>
        {{ macros.loadSplide() }}
        {% inlinejs %}
            loadjs.ready('splide', {
                success: function() {
                    new Splide('.{{ class }}', {
                        pagination: true,
                        arrows: false,
                        rewind: true,
                        perPage: 1
                    }).mount();
                }
            });
        {% endinlinejs %}
    {% endif %}
{% endif %}
